{
  "address": "0xC5d2F398162be38f13bb12b494a8BEDD8D620fb9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timelockEnd",
          "type": "uint256"
        }
      ],
      "name": "SwapCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hashlock",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timelockSeconds",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "createSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "swaps",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d6814f13e8f735f650fb2e7c8628c89f98b6d438271369b8cde26bf703292c7",
  "receipt": {
    "to": null,
    "from": "0xD2692F9df925D18D527ABe8b3d99EE9E9C8d75AE",
    "contractAddress": "0xC5d2F398162be38f13bb12b494a8BEDD8D620fb9",
    "transactionIndex": 0,
    "gasUsed": "36813586",
    "logsBloom": "0x
    "blockHash": "0x2f3985359a3f3ae5313377748ea2e77f59fd098e4a57d3dc023595241153e235",
    "transactionHash": "0x7d6814f13e8f735f650fb2e7c8628c89f98b6d438271369b8cde26bf703292c7",
    "logs": [],
    "blockNumber": 20846388,
    "cumulativeGasUsed": "36813586",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1be1f0cf1fb2732d7f6fcaaa37fbe133",
  "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelockEnd\",\"type\":\"uint256\"}],\"name\":\"SwapCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashlock\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timelockSeconds\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createSwap(bytes32,uint256,address,address,uint256)\":{\"params\":{\"amount\":\"Cantidad de tokens a intercambiar.\",\"hashlock\":\"El hash keccak256 del secreto compartido.\",\"receiver\":\"Direcci\\u00f3n que recibir\\u00e1 los tokens si presenta el secreto.\",\"timelockSeconds\":\"Duraci\\u00f3n del timelock en segundos.\",\"tokenAddress\":\"Direcci\\u00f3n del contrato del token ERC-20 a intercambiar.\"}}},\"title\":\"SwapFactory para desplegar y gestionar instancias de FusionSwapIntentERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createSwap(bytes32,uint256,address,address,uint256)\":{\"notice\":\"Crea una nueva instancia del contrato FusionSwapIntentERC20.         El usuario (msg.sender) debe haber APROBADO previamente         que esta Factory pueda gastar sus 'amount' de 'tokenAddress'.\"}},\"notice\":\"Permite la creaci\\u00f3n estandarizada de nuevos swaps at\\u00f3micos ERC-20         y centraliza el dep\\u00f3sito inicial de tokens del usuario.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapFactory.sol\":\"SwapFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x6b11eb41a228cca35d4b662b4df69fcd75192851365102690f57b2ac01e83fe6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/FusionSwapIntentERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.30;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\r\\nimport { EIP712 } from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\r\\n\\r\\n/// @title Cross-Chain Atomic Swap Intent ERC20 (Fusion+ Compatible)\\r\\n/// @notice Contrato para swaps at\\u00f3micos con hashlock y timelock que\\r\\n///         puede usarse en flujos cross-chain con relayers como Fusion+.\\r\\ncontract FusionSwapIntentERC20 is EIP712 {\\r\\n    address public sender; // Quien crea el swap (y puede pedir reembolso)\\r\\n    address public receiver; // Quien recibe los fondos si revela el secreto\\r\\n    bytes32 public hashlock; // keccak256(secreto)\\r\\n    uint256 public timelock;\\r\\n    uint256 public amount;\\r\\n    IERC20 public token; // Token ERC-20\\r\\n    bool public withdrawn; // Swap ejecutado con \\u00e9xito\\r\\n    bool public refunded;\\r\\n\\r\\n    bytes32 private constant SWAP_INTENT_TYPEHASH =\\r\\n        keccak256(\\r\\n            \\\"SwapIntent(address sender,address receiver,uint256 fromChainId,uint256 toChainId,address fromToken,address toToken,uint256 amount,bytes32 hashlock,uint256 timelock)\\\"\\r\\n        );\\r\\n\\r\\n    event SwapIntentCreated(\\r\\n        address indexed sender,\\r\\n        address indexed receiver,\\r\\n        address indexed token,\\r\\n        bytes32 hashlock,\\r\\n        uint256 timelock,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event SecretRevealed(bytes32 secret);\\r\\n    event SwapExecuted(address executor, bytes32 secret);\\r\\n    event SwapRefunded();\\r\\n\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory version,\\r\\n        address _sender,\\r\\n        bytes32 _hashlock,\\r\\n        uint256 _timelockSeconds,\\r\\n        address _receiver,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) EIP712(name, version) {\\r\\n        require(_sender != address(0), \\\"Invalid sender\\\");\\r\\n        require(_receiver != address(0), \\\"Invalid receiver\\\");\\r\\n        require(_token != address(0), \\\"Invalid token\\\");\\r\\n        require(_amount > 0, \\\"Amount must be > 0\\\");\\r\\n        require(_timelockSeconds > 0, \\\"Timelock must be positive\\\");\\r\\n\\r\\n        sender = _sender;\\r\\n        receiver = _receiver;\\r\\n        hashlock = _hashlock;\\r\\n        timelock = block.timestamp + _timelockSeconds;\\r\\n        token = IERC20(_token);\\r\\n        amount = _amount;\\r\\n\\r\\n        emit SwapIntentCreated(_sender, _receiver, _token, _hashlock, timelock, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Publica el secreto para que solvers lo usen en otra cadena\\r\\n    ///         (ej. para completar el swap en Optimism si se revel\\u00f3 en Etherlink)\\r\\n    function revealSecret(bytes32 _secret) external {\\r\\n        require(keccak256(abi.encodePacked(_secret)) == hashlock, \\\"Invalid secret\\\");\\r\\n        emit SecretRevealed(_secret);\\r\\n    }\\r\\n\\r\\n    function verifySignature(\\r\\n        address _sender,\\r\\n        address _receiver,\\r\\n        uint256 _fromChainId,\\r\\n        uint256 _toChainId,\\r\\n        address _fromToken,\\r\\n        address _toToken,\\r\\n        uint256 _amount,\\r\\n        bytes32 _hashlock,\\r\\n        uint256 _timelock,\\r\\n        bytes memory signature\\r\\n    ) internal view returns (bool) {\\r\\n        // 1. Calcula el hash de la estructura del mensaje firmado por el usuario.\\r\\n        bytes32 structHash = keccak256(\\r\\n            abi.encode(\\r\\n                SWAP_INTENT_TYPEHASH,\\r\\n                _sender,\\r\\n                _receiver,\\r\\n                _fromChainId,\\r\\n                _toChainId,\\r\\n                _fromToken,\\r\\n                _toToken,\\r\\n                _amount,\\r\\n                _hashlock,\\r\\n                _timelock\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return SignatureChecker.isValidSignatureNow(_sender, _hashTypedDataV4(structHash), signature);\\r\\n    }\\r\\n\\r\\n    /// @notice Ejecuta el swap si se conoce el secreto.\\r\\n    /// @dev Abierto para cualquier executor que tenga el preimagen v\\u00e1lida.\\r\\n    function executeSwap(\\r\\n        bytes32 _secret,\\r\\n        uint256 fromChainId,\\r\\n        uint256 toChainId,\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        bytes memory signature\\r\\n    ) external {\\r\\n        bytes32 structHash = _hashTypedDataV4(\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    SWAP_INTENT_TYPEHASH,\\r\\n                    sender,\\r\\n                    receiver,\\r\\n                    fromChainId,\\r\\n                    toChainId,\\r\\n                    fromToken,\\r\\n                    toToken,\\r\\n                    amount,\\r\\n                    hashlock,\\r\\n                    timelock\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        require(SignatureChecker.isValidSignatureNow(sender, structHash, signature), \\\"Invalid signature\\\");\\r\\n\\r\\n        require(!withdrawn, \\\"Already executed\\\");\\r\\n        require(!refunded, \\\"Already refunded\\\");\\r\\n        require(keccak256(abi.encodePacked(_secret)) == hashlock, \\\"Invalid secret\\\");\\r\\n        require(block.timestamp <= timelock, \\\"Timelock has expired\\\"); // Usa el timelock del constructor\\r\\n\\r\\n        withdrawn = true;\\r\\n        require(token.transfer(receiver, amount), \\\"Token transfer failed\\\");\\r\\n        emit SwapExecuted(msg.sender, _secret);\\r\\n    }\\r\\n\\r\\n    /// @notice Permite al sender reembolsar si nadie revel\\u00f3 el secreto antes del timelock.\\r\\n    function refundSwap() external {\\r\\n        require(block.timestamp > timelock, \\\"Timelock not expired\\\");\\r\\n        require(msg.sender == sender, \\\"Only sender can refund\\\");\\r\\n        require(!withdrawn, \\\"Already executed\\\");\\r\\n        require(!refunded, \\\"Already refunded\\\");\\r\\n\\r\\n        refunded = true;\\r\\n        require(token.transfer(sender, amount), \\\"Refund failed\\\");\\r\\n        emit SwapRefunded();\\r\\n    }\\r\\n\\r\\n    /// @return Estado actual como texto\\r\\n    function getSwapStatus() external view returns (string memory) {\\r\\n        if (withdrawn) return \\\"Completed\\\";\\r\\n        if (refunded) return \\\"Refunded\\\";\\r\\n        return \\\"Pending\\\";\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xacd69b037df3125912ca4ad5eefb86cffa3384597e344f3f5904d2d1bf4f197b\",\"license\":\"MIT\"},\"contracts/SwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./FusionSwapIntentERC20.sol\\\";\\r\\n\\r\\n/// @title SwapFactory para desplegar y gestionar instancias de FusionSwapIntentERC20\\r\\n/// @notice Permite la creaci\\u00f3n estandarizada de nuevos swaps at\\u00f3micos ERC-20\\r\\n///         y centraliza el dep\\u00f3sito inicial de tokens del usuario.\\r\\ncontract SwapFactory {\\r\\n    //states\\r\\n    mapping(address => address) public swaps;\\r\\n    uint256 public swapCounter;\\r\\n    string name = \\\"FusionSwapIntentERC20\\\";\\r\\n    string version = \\\"1\\\";\\r\\n\\r\\n    //events\\r\\n    event SwapCreated(\\r\\n        address swapAddress,\\r\\n        address indexed creator,\\r\\n        address indexed receiver,\\r\\n        address indexed token, // La direcci\\u00f3n del token ERC-20\\r\\n        uint256 amount,\\r\\n        uint256 timelockEnd\\r\\n    );\\r\\n\\r\\n    /// @notice Crea una nueva instancia del contrato FusionSwapIntentERC20.\\r\\n    ///         El usuario (msg.sender) debe haber APROBADO previamente\\r\\n    ///         que esta Factory pueda gastar sus 'amount' de 'tokenAddress'.\\r\\n    /// @param hashlock El hash keccak256 del secreto compartido.\\r\\n    /// @param timelockSeconds Duraci\\u00f3n del timelock en segundos.\\r\\n    /// @param receiver Direcci\\u00f3n que recibir\\u00e1 los tokens si presenta el secreto.\\r\\n    /// @param tokenAddress Direcci\\u00f3n del contrato del token ERC-20 a intercambiar.\\r\\n    /// @param amount Cantidad de tokens a intercambiar.\\r\\n    function createSwap(\\r\\n        bytes32 hashlock,\\r\\n        uint256 timelockSeconds,\\r\\n        address receiver,\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external {\\r\\n        require(amount > 0, \\\"Amount must be greater than zero.\\\");\\r\\n        require(receiver != address(0), \\\"Receiver address required.\\\");\\r\\n        require(tokenAddress != address(0), \\\"Token address required.\\\");\\r\\n        require(timelockSeconds > 0, \\\"Timelock must be positive.\\\");\\r\\n\\r\\n        IERC20 tokenInstance = IERC20(tokenAddress);\\r\\n        address user = msg.sender;\\r\\n\\r\\n        // Paso 1: Mover los tokens del USUARIO (msg.sender) a la Factory.\\r\\n        // El usuario debe haber llamado a token.approve(address(this), amount) ANTES de llamar a esta funci\\u00f3n.\\r\\n        require(\\r\\n            tokenInstance.transferFrom(user, address(this), amount),\\r\\n            \\\"Token transfer from user to factory failed. Check allowance.\\\"\\r\\n        );\\r\\n\\r\\n        // Paso 2: Crear la nueva instancia del contrato FusionSwapIntentERC20.\\r\\n        // Pasamos msg.sender como el '_sender' original para el FusionSwapIntentERC20\\r\\n        // para que ese contrato sepa qui\\u00e9n tiene los derechos de reembolso.\\r\\n\\r\\n        FusionSwapIntentERC20 newSwap = new FusionSwapIntentERC20(\\r\\n            name,\\r\\n            version,\\r\\n            user,\\r\\n            hashlock,\\r\\n            timelockSeconds,\\r\\n            receiver,\\r\\n            tokenAddress,\\r\\n            amount\\r\\n        );\\r\\n\\r\\n        // Paso 3: Mover los tokens de la Factory al nuevo contrato de swap.\\r\\n        // Ahora los tokens est\\u00e1n en la Factory, y se transfieren al contrato de swap reci\\u00e9n creado.\\r\\n        require(\\r\\n            tokenInstance.transfer(address(newSwap), amount),\\r\\n            \\\"Token transfer from factory to new swap contract failed.\\\"\\r\\n        );\\r\\n\\r\\n        // Almacenar la direcci\\u00f3n del nuevo contrato de swap\\r\\n        // allSwaps.push(address(newSwap));\\r\\n        swaps[user] = address(newSwap);\\r\\n        swapCounter++;\\r\\n\\r\\n        emit SwapCreated(\\r\\n            address(newSwap),\\r\\n            msg.sender,\\r\\n            receiver,\\r\\n            tokenAddress,\\r\\n            amount,\\r\\n            block.timestamp + timelockSeconds\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x05394cba4017ee56a6c859d37740e592b55e1c8656c2d064087710b63db454d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052601560809081527f467573696f6e53776170496e74656e744552433230000000000000000000000060a05260029061003c9082610114565b506040805180820190915260018152603160f81b60208201526003906100629082610114565b5034801561006f57600080fd5b506101d2565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061009f57607f821691505b6020821081036100bf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561010f57806000526020600020601f840160051c810160208510156100ec5750805b601f840160051c820191505b8181101561010c57600081556001016100f8565b50505b505050565b81516001600160401b0381111561012d5761012d610075565b6101418161013b845461008b565b846100c5565b6020601f821160018114610175576000831561015d5750848201515b600019600385901b1c1916600184901b17845561010c565b600084815260208120601f198516915b828110156101a55787850151825560209485019460019092019101610185565b50848210156101c35786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b611fad806101e16000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631688cf541461004657806333bce8c31461008c578063da8b673f146100a3575b600080fd5b61006f610054366004610508565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009560015481565b604051908152602001610083565b6100b66100b136600461052a565b6100b8565b005b600081116101175760405162461bcd60e51b815260206004820152602160248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152601760f91b60648201526084015b60405180910390fd5b6001600160a01b03831661016d5760405162461bcd60e51b815260206004820152601a60248201527f526563656976657220616464726573732072657175697265642e000000000000604482015260640161010e565b6001600160a01b0382166101c35760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20616464726573732072657175697265642e000000000000000000604482015260640161010e565b600084116102135760405162461bcd60e51b815260206004820152601a60248201527f54696d656c6f636b206d75737420626520706f7369746976652e000000000000604482015260640161010e565b6040516323b872dd60e01b815233600482018190523060248301526044820183905283916001600160a01b038316906323b872dd906064016020604051808303816000875af115801561026a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028e9190610578565b6103005760405162461bcd60e51b815260206004820152603c60248201527f546f6b656e207472616e736665722066726f6d207573657220746f206661637460448201527f6f7279206661696c65642e20436865636b20616c6c6f77616e63652e00000000606482015260840161010e565b600060026003838a8a8a8a8a604051610318906104df565b61032998979695949392919061063d565b604051809103906000f080158015610345573d6000803e3d6000fd5b5060405163a9059cbb60e01b81526001600160a01b038083166004830152602482018790529192509084169063a9059cbb906044016020604051808303816000875af1158015610399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bd9190610578565b61042f5760405162461bcd60e51b815260206004820152603860248201527f546f6b656e207472616e736665722066726f6d20666163746f727920746f206e60448201527f6577207377617020636f6e7472616374206661696c65642e0000000000000000606482015260840161010e565b6001600160a01b03828116600090815260208190526040812080546001600160a01b03191692841692909217909155600180549161046c836106b9565b90915550506001600160a01b03808616908716337f63ddfe275c04d4adf4185de83aad2f6b1eb299f299177fad015f6c039cb79b8d84886104ad8d426106d2565b604080516001600160a01b03909416845260208401929092529082015260600160405180910390a45050505050505050565b61188c806106ec83390190565b80356001600160a01b038116811461050357600080fd5b919050565b60006020828403121561051a57600080fd5b610523826104ec565b9392505050565b600080600080600060a0868803121561054257600080fd5b8535945060208601359350610559604087016104ec565b9250610567606087016104ec565b949793965091946080013592915050565b60006020828403121561058a57600080fd5b8151801515811461052357600080fd5b8054600090600181811c908216806105b357607f821691505b6020821081036105d357634e487b7160e01b600052602260045260246000fd5b818652602086018180156105ee576001811461060457610632565b60ff198516825283151560051b82019550610632565b60008781526020902060005b8581101561062c57815484820152600190910190602001610610565b83019650505b505050505092915050565b6101008152600061065261010083018b61059a565b8281036020840152610664818b61059a565b6001600160a01b03998a16604085015260608401989098525050608081019490945291851660a084015290931660c082015260e0019190915292915050565b634e487b7160e01b600052601160045260246000fd5b6000600182016106cb576106cb6106a3565b5060010190565b808201808211156106e5576106e56106a3565b9291505056fe61016060405234801561001157600080fd5b5060405161188c38038061188c83398101604081905261003091610460565b878761003d826000610310565b6101205261004c816001610310565b61014052815160208084019190912060e052815190820120610100524660a0526100d960e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c0526001600160a01b03861661012e5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2b73232b960911b60448201526064015b60405180910390fd5b6001600160a01b0383166101775760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610125565b6001600160a01b0382166101bd5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b6044820152606401610125565b600081116102025760405162461bcd60e51b81526020600482015260126024820152710416d6f756e74206d757374206265203e20360741b6044820152606401610125565b600084116102525760405162461bcd60e51b815260206004820152601960248201527f54696d656c6f636b206d75737420626520706f736974697665000000000000006044820152606401610125565b600280546001600160a01b038089166001600160a01b03199283161790925560038054928616929091169190911790556004859055610291844261051b565b6005819055600780546001600160a01b0319166001600160a01b038581169182179092556006849055604080518981526020810194909452830184905291858216918916907f2fdb6f62c0073da0eca287e922e0d8a00b5fc3ccf52e955d67cdc42bb83e23299060600160405180910390a450505050505050506106da565b600060208351101561032c5761032583610343565b905061033d565b8161033784826105c5565b5060ff90505b92915050565b600080829050601f8151111561036e578260405163305a27a960e01b81526004016101259190610683565b8051610379826106b6565b179392505050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103b257818101518382015260200161039a565b50506000910152565b600082601f8301126103cc57600080fd5b81516001600160401b038111156103e5576103e5610381565b604051601f8201601f19908116603f011681016001600160401b038111828210171561041357610413610381565b60405281815283820160200185101561042b57600080fd5b61043c826020830160208701610397565b949350505050565b80516001600160a01b038116811461045b57600080fd5b919050565b600080600080600080600080610100898b03121561047d57600080fd5b88516001600160401b0381111561049357600080fd5b61049f8b828c016103bb565b60208b015190995090506001600160401b038111156104bd57600080fd5b6104c98b828c016103bb565b9750506104d860408a01610444565b60608a015160808b0151919750955093506104f560a08a01610444565b925061050360c08a01610444565b60e09990990151979a96995094979396929591945050565b8082018082111561033d57634e487b7160e01b600052601160045260246000fd5b600181811c9082168061055057607f821691505b60208210810361057057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156105c057806000526020600020601f840160051c8101602085101561059d5750805b601f840160051c820191505b818110156105bd57600081556001016105a9565b50505b505050565b81516001600160401b038111156105de576105de610381565b6105f2816105ec845461053c565b84610576565b6020601f821160018114610626576000831561060e5750848201515b600019600385901b1c1916600184901b1784556105bd565b600084815260208120601f198516915b828110156106565787850151825560209485019460019092019101610636565b50848210156106745786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60208152600082518060208401526106a2816040850160208701610397565b601f01601f19169190910160400192915050565b805160208083015191908110156105705760001960209190910360031b1b16919050565b60805160a05160c05160e0516101005161012051610140516111586107346000396000610927015260006108f501526000610b6801526000610b4001526000610a9b01526000610ac501526000610aef01526111586000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063aa8c217c1161008c578063c80ec52211610066578063c80ec522146101a8578063d33219b4146101bc578063f7260d3e146101c5578063fc0c546a146101d857600080fd5b8063aa8c217c14610184578063c6e58b691461018d578063c72b61be146101a057600080fd5b806312f53950146100d4578063153127ce146100fd578063603075451461011257806367e404ce1461012757806384b0196e14610152578063a782086e1461016d575b600080fd5b6007546100e890600160a81b900460ff1681565b60405190151581526020015b60405180910390f35b6101056101eb565b6040516100f49190610e67565b610125610120366004610e81565b61027b565b005b60025461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100f4565b61015a610319565b6040516100f49796959493929190610e9a565b61017660045481565b6040519081526020016100f4565b61017660065481565b61012561019b366004610f64565b61035f565b6101256106c3565b6007546100e890600160a01b900460ff1681565b61017660055481565b60035461013a906001600160a01b031681565b60075461013a906001600160a01b031681565b600754606090600160a01b900460ff1615610224575060408051808201909152600981526810dbdb5c1b195d195960ba1b602082015290565b600754600160a81b900460ff161561025957506040805180820190915260088152671499599d5b99195960c21b602082015290565b5060408051808201909152600781526650656e64696e6760c81b602082015290565b60045460408051602081018490520160405160208183030381529060405280519060200120146102e35760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081cd958dc995d60921b60448201526064015b60405180910390fd5b6040518181527f9b7ddc883342824bd7ddbff103e7a69f8f2e60b96c075cd1b8b8b9713ecc75a49060200160405180910390a150565b60006060806000806000606061032d6108ee565b610335610920565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b600254600354600654600454600554604080517fe7b071650bf304f595cdd624ff192f83aea5b4b5ae0d872515eef38d9ce4dc1760208201526001600160a01b03968716918101919091529385166060850152608084018a905260a0840189905287851660c085015293861660e084015261010083019190915261012082015261014081019190915260009061040e90610160016040516020818303038152906040528051906020012061094d565b600254909150610428906001600160a01b03168284610980565b6104685760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064016102da565b600754600160a01b900460ff16156104b55760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b60448201526064016102da565b600754600160a81b900460ff16156105025760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c99599d5b99195960821b60448201526064016102da565b60045460408051602081018a90520160405160208183030381529060405280519060200120146105655760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081cd958dc995d60921b60448201526064016102da565b6005544211156105ae5760405162461bcd60e51b8152602060048201526014602482015273151a5b595b1bd8dac81a185cc8195e1c1a5c995960621b60448201526064016102da565b60078054600160a01b60ff60a01b1982161790915560035460065460405163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af1158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d919061105a565b6106815760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b60448201526064016102da565b60408051338152602081018990527f0a4faf42a072190da8e63181188040fe68178ee1900cc648968012688226447f910160405180910390a150505050505050565b600554421161070b5760405162461bcd60e51b8152602060048201526014602482015273151a5b595b1bd8dac81b9bdd08195e1c1a5c995960621b60448201526064016102da565b6002546001600160a01b0316331461075e5760405162461bcd60e51b815260206004820152601660248201527513db9b1e481cd95b99195c8818d85b881c99599d5b9960521b60448201526064016102da565b600754600160a01b900460ff16156107ab5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b60448201526064016102da565b600754600160a81b900460ff16156107f85760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c99599d5b99195960821b60448201526064016102da565b60078054600160a81b60ff60a81b1982161790915560025460065460405163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af1158015610863573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610887919061105a565b6108c35760405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b60448201526064016102da565b6040517feca32268c495f4202277ddc0853891e19ad3250bd98fd2b2aaba02d05d13ede490600090a1565b606061091b7f000000000000000000000000000000000000000000000000000000000000000060006109e2565b905090565b606061091b7f000000000000000000000000000000000000000000000000000000000000000060016109e2565b600061097a61095a610a8e565b8360405161190160f01b8152600281019290925260228201526042902090565b92915050565b600080600061098f8585610bb9565b50909250905060008160038111156109a9576109a961107c565b1480156109c75750856001600160a01b0316826001600160a01b0316145b806109d857506109d8868686610c06565b9695505050505050565b606060ff83146109fc576109f583610ce1565b905061097a565b818054610a0890611092565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3490611092565b8015610a815780601f10610a5657610100808354040283529160200191610a81565b820191906000526020600020905b815481529060010190602001808311610a6457829003601f168201915b5050505050905092915050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610ae757507f000000000000000000000000000000000000000000000000000000000000000046145b15610b1157507f000000000000000000000000000000000000000000000000000000000000000090565b61091b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60008060008351604103610bf35760208401516040850151606086015160001a610be588828585610d20565b955095509550505050610bff565b50508151600091506002905b9250925092565b6000806000856001600160a01b03168585604051602401610c289291906110cc565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b17905251610c5d91906110ed565b600060405180830381855afa9150503d8060008114610c98576040519150601f19603f3d011682016040523d82523d6000602084013e610c9d565b606091505b5091509150818015610cb157506020815110155b80156109d857508051630b135d3f60e11b90610cd69083016020908101908401611109565b149695505050505050565b60606000610cee83610def565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610d5b5750600091506003905082610de5565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610daf573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610ddb57506000925060019150829050610de5565b9250600091508190505b9450945094915050565b600060ff8216601f81111561097a57604051632cd44ac360e21b815260040160405180910390fd5b60005b83811015610e32578181015183820152602001610e1a565b50506000910152565b60008151808452610e53816020860160208601610e17565b601f01601f19169290920160200192915050565b602081526000610e7a6020830184610e3b565b9392505050565b600060208284031215610e9357600080fd5b5035919050565b60ff60f81b8816815260e060208201526000610eb960e0830189610e3b565b8281036040840152610ecb8189610e3b565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b81811015610f21578351835260209384019390920191600101610f03565b50909b9a5050505050505050505050565b80356001600160a01b0381168114610f4957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610f7d57600080fd5b863595506020870135945060408701359350610f9b60608801610f32565b9250610fa960808801610f32565b915060a087013567ffffffffffffffff811115610fc557600080fd5b8701601f81018913610fd657600080fd5b803567ffffffffffffffff811115610ff057610ff0610f4e565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561101f5761101f610f4e565b6040528181528282016020018b101561103757600080fd5b816020840160208301376000602083830101528093505050509295509295509295565b60006020828403121561106c57600080fd5b81518015158114610e7a57600080fd5b634e487b7160e01b600052602160045260246000fd5b600181811c908216806110a657607f821691505b6020821081036110c657634e487b7160e01b600052602260045260246000fd5b50919050565b8281526040602082015260006110e56040830184610e3b565b949350505050565b600082516110ff818460208701610e17565b9190910192915050565b60006020828403121561111b57600080fd5b505191905056fea2646970667358221220dbe9ea35381e09d4dc2161ca5015c1fbaa6aa114322daeb7b9e079caadd5127964736f6c634300081e0033a264697066735822122062fff97323b3eb2a69a9b9ae25bb006dc4f83ccd506f0a8918b18ab994fee8cd64736f6c634300081e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80631688cf541461004657806333bce8c31461008c578063da8b673f146100a3575b600080fd5b61006f610054366004610508565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009560015481565b604051908152602001610083565b6100b66100b136600461052a565b6100b8565b005b600081116101175760405162461bcd60e51b815260206004820152602160248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152601760f91b60648201526084015b60405180910390fd5b6001600160a01b03831661016d5760405162461bcd60e51b815260206004820152601a60248201527f526563656976657220616464726573732072657175697265642e000000000000604482015260640161010e565b6001600160a01b0382166101c35760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20616464726573732072657175697265642e000000000000000000604482015260640161010e565b600084116102135760405162461bcd60e51b815260206004820152601a60248201527f54696d656c6f636b206d75737420626520706f7369746976652e000000000000604482015260640161010e565b6040516323b872dd60e01b815233600482018190523060248301526044820183905283916001600160a01b038316906323b872dd906064016020604051808303816000875af115801561026a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028e9190610578565b6103005760405162461bcd60e51b815260206004820152603c60248201527f546f6b656e207472616e736665722066726f6d207573657220746f206661637460448201527f6f7279206661696c65642e20436865636b20616c6c6f77616e63652e00000000606482015260840161010e565b600060026003838a8a8a8a8a604051610318906104df565b61032998979695949392919061063d565b604051809103906000f080158015610345573d6000803e3d6000fd5b5060405163a9059cbb60e01b81526001600160a01b038083166004830152602482018790529192509084169063a9059cbb906044016020604051808303816000875af1158015610399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bd9190610578565b61042f5760405162461bcd60e51b815260206004820152603860248201527f546f6b656e207472616e736665722066726f6d20666163746f727920746f206e60448201527f6577207377617020636f6e7472616374206661696c65642e0000000000000000606482015260840161010e565b6001600160a01b03828116600090815260208190526040812080546001600160a01b03191692841692909217909155600180549161046c836106b9565b90915550506001600160a01b03808616908716337f63ddfe275c04d4adf4185de83aad2f6b1eb299f299177fad015f6c039cb79b8d84886104ad8d426106d2565b604080516001600160a01b03909416845260208401929092529082015260600160405180910390a45050505050505050565b61188c806106ec83390190565b80356001600160a01b038116811461050357600080fd5b919050565b60006020828403121561051a57600080fd5b610523826104ec565b9392505050565b600080600080600060a0868803121561054257600080fd5b8535945060208601359350610559604087016104ec565b9250610567606087016104ec565b949793965091946080013592915050565b60006020828403121561058a57600080fd5b8151801515811461052357600080fd5b8054600090600181811c908216806105b357607f821691505b6020821081036105d357634e487b7160e01b600052602260045260246000fd5b818652602086018180156105ee576001811461060457610632565b60ff198516825283151560051b82019550610632565b60008781526020902060005b8581101561062c57815484820152600190910190602001610610565b83019650505b505050505092915050565b6101008152600061065261010083018b61059a565b8281036020840152610664818b61059a565b6001600160a01b03998a16604085015260608401989098525050608081019490945291851660a084015290931660c082015260e0019190915292915050565b634e487b7160e01b600052601160045260246000fd5b6000600182016106cb576106cb6106a3565b5060010190565b808201808211156106e5576106e56106a3565b9291505056fe61016060405234801561001157600080fd5b5060405161188c38038061188c83398101604081905261003091610460565b878761003d826000610310565b6101205261004c816001610310565b61014052815160208084019190912060e052815190820120610100524660a0526100d960e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c0526001600160a01b03861661012e5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2b73232b960911b60448201526064015b60405180910390fd5b6001600160a01b0383166101775760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610125565b6001600160a01b0382166101bd5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b6044820152606401610125565b600081116102025760405162461bcd60e51b81526020600482015260126024820152710416d6f756e74206d757374206265203e20360741b6044820152606401610125565b600084116102525760405162461bcd60e51b815260206004820152601960248201527f54696d656c6f636b206d75737420626520706f736974697665000000000000006044820152606401610125565b600280546001600160a01b038089166001600160a01b03199283161790925560038054928616929091169190911790556004859055610291844261051b565b6005819055600780546001600160a01b0319166001600160a01b038581169182179092556006849055604080518981526020810194909452830184905291858216918916907f2fdb6f62c0073da0eca287e922e0d8a00b5fc3ccf52e955d67cdc42bb83e23299060600160405180910390a450505050505050506106da565b600060208351101561032c5761032583610343565b905061033d565b8161033784826105c5565b5060ff90505b92915050565b600080829050601f8151111561036e578260405163305a27a960e01b81526004016101259190610683565b8051610379826106b6565b179392505050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103b257818101518382015260200161039a565b50506000910152565b600082601f8301126103cc57600080fd5b81516001600160401b038111156103e5576103e5610381565b604051601f8201601f19908116603f011681016001600160401b038111828210171561041357610413610381565b60405281815283820160200185101561042b57600080fd5b61043c826020830160208701610397565b949350505050565b80516001600160a01b038116811461045b57600080fd5b919050565b600080600080600080600080610100898b03121561047d57600080fd5b88516001600160401b0381111561049357600080fd5b61049f8b828c016103bb565b60208b015190995090506001600160401b038111156104bd57600080fd5b6104c98b828c016103bb565b9750506104d860408a01610444565b60608a015160808b0151919750955093506104f560a08a01610444565b925061050360c08a01610444565b60e09990990151979a96995094979396929591945050565b8082018082111561033d57634e487b7160e01b600052601160045260246000fd5b600181811c9082168061055057607f821691505b60208210810361057057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156105c057806000526020600020601f840160051c8101602085101561059d5750805b601f840160051c820191505b818110156105bd57600081556001016105a9565b50505b505050565b81516001600160401b038111156105de576105de610381565b6105f2816105ec845461053c565b84610576565b6020601f821160018114610626576000831561060e5750848201515b600019600385901b1c1916600184901b1784556105bd565b600084815260208120601f198516915b828110156106565787850151825560209485019460019092019101610636565b50848210156106745786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60208152600082518060208401526106a2816040850160208701610397565b601f01601f19169190910160400192915050565b805160208083015191908110156105705760001960209190910360031b1b16919050565b60805160a05160c05160e0516101005161012051610140516111586107346000396000610927015260006108f501526000610b6801526000610b4001526000610a9b01526000610ac501526000610aef01526111586000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063aa8c217c1161008c578063c80ec52211610066578063c80ec522146101a8578063d33219b4146101bc578063f7260d3e146101c5578063fc0c546a146101d857600080fd5b8063aa8c217c14610184578063c6e58b691461018d578063c72b61be146101a057600080fd5b806312f53950146100d4578063153127ce146100fd578063603075451461011257806367e404ce1461012757806384b0196e14610152578063a782086e1461016d575b600080fd5b6007546100e890600160a81b900460ff1681565b60405190151581526020015b60405180910390f35b6101056101eb565b6040516100f49190610e67565b610125610120366004610e81565b61027b565b005b60025461013a906001600160a01b031681565b6040516001600160a01b0390911681526020016100f4565b61015a610319565b6040516100f49796959493929190610e9a565b61017660045481565b6040519081526020016100f4565b61017660065481565b61012561019b366004610f64565b61035f565b6101256106c3565b6007546100e890600160a01b900460ff1681565b61017660055481565b60035461013a906001600160a01b031681565b60075461013a906001600160a01b031681565b600754606090600160a01b900460ff1615610224575060408051808201909152600981526810dbdb5c1b195d195960ba1b602082015290565b600754600160a81b900460ff161561025957506040805180820190915260088152671499599d5b99195960c21b602082015290565b5060408051808201909152600781526650656e64696e6760c81b602082015290565b60045460408051602081018490520160405160208183030381529060405280519060200120146102e35760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081cd958dc995d60921b60448201526064015b60405180910390fd5b6040518181527f9b7ddc883342824bd7ddbff103e7a69f8f2e60b96c075cd1b8b8b9713ecc75a49060200160405180910390a150565b60006060806000806000606061032d6108ee565b610335610920565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b600254600354600654600454600554604080517fe7b071650bf304f595cdd624ff192f83aea5b4b5ae0d872515eef38d9ce4dc1760208201526001600160a01b03968716918101919091529385166060850152608084018a905260a0840189905287851660c085015293861660e084015261010083019190915261012082015261014081019190915260009061040e90610160016040516020818303038152906040528051906020012061094d565b600254909150610428906001600160a01b03168284610980565b6104685760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064016102da565b600754600160a01b900460ff16156104b55760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b60448201526064016102da565b600754600160a81b900460ff16156105025760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c99599d5b99195960821b60448201526064016102da565b60045460408051602081018a90520160405160208183030381529060405280519060200120146105655760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081cd958dc995d60921b60448201526064016102da565b6005544211156105ae5760405162461bcd60e51b8152602060048201526014602482015273151a5b595b1bd8dac81a185cc8195e1c1a5c995960621b60448201526064016102da565b60078054600160a01b60ff60a01b1982161790915560035460065460405163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af1158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d919061105a565b6106815760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b60448201526064016102da565b60408051338152602081018990527f0a4faf42a072190da8e63181188040fe68178ee1900cc648968012688226447f910160405180910390a150505050505050565b600554421161070b5760405162461bcd60e51b8152602060048201526014602482015273151a5b595b1bd8dac81b9bdd08195e1c1a5c995960621b60448201526064016102da565b6002546001600160a01b0316331461075e5760405162461bcd60e51b815260206004820152601660248201527513db9b1e481cd95b99195c8818d85b881c99599d5b9960521b60448201526064016102da565b600754600160a01b900460ff16156107ab5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b60448201526064016102da565b600754600160a81b900460ff16156107f85760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c99599d5b99195960821b60448201526064016102da565b60078054600160a81b60ff60a81b1982161790915560025460065460405163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af1158015610863573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610887919061105a565b6108c35760405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b60448201526064016102da565b6040517feca32268c495f4202277ddc0853891e19ad3250bd98fd2b2aaba02d05d13ede490600090a1565b606061091b7f000000000000000000000000000000000000000000000000000000000000000060006109e2565b905090565b606061091b7f000000000000000000000000000000000000000000000000000000000000000060016109e2565b600061097a61095a610a8e565b8360405161190160f01b8152600281019290925260228201526042902090565b92915050565b600080600061098f8585610bb9565b50909250905060008160038111156109a9576109a961107c565b1480156109c75750856001600160a01b0316826001600160a01b0316145b806109d857506109d8868686610c06565b9695505050505050565b606060ff83146109fc576109f583610ce1565b905061097a565b818054610a0890611092565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3490611092565b8015610a815780601f10610a5657610100808354040283529160200191610a81565b820191906000526020600020905b815481529060010190602001808311610a6457829003601f168201915b5050505050905092915050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610ae757507f000000000000000000000000000000000000000000000000000000000000000046145b15610b1157507f000000000000000000000000000000000000000000000000000000000000000090565b61091b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60008060008351604103610bf35760208401516040850151606086015160001a610be588828585610d20565b955095509550505050610bff565b50508151600091506002905b9250925092565b6000806000856001600160a01b03168585604051602401610c289291906110cc565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b17905251610c5d91906110ed565b600060405180830381855afa9150503d8060008114610c98576040519150601f19603f3d011682016040523d82523d6000602084013e610c9d565b606091505b5091509150818015610cb157506020815110155b80156109d857508051630b135d3f60e11b90610cd69083016020908101908401611109565b149695505050505050565b60606000610cee83610def565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610d5b5750600091506003905082610de5565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610daf573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610ddb57506000925060019150829050610de5565b9250600091508190505b9450945094915050565b600060ff8216601f81111561097a57604051632cd44ac360e21b815260040160405180910390fd5b60005b83811015610e32578181015183820152602001610e1a565b50506000910152565b60008151808452610e53816020860160208601610e17565b601f01601f19169290920160200192915050565b602081526000610e7a6020830184610e3b565b9392505050565b600060208284031215610e9357600080fd5b5035919050565b60ff60f81b8816815260e060208201526000610eb960e0830189610e3b565b8281036040840152610ecb8189610e3b565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b81811015610f21578351835260209384019390920191600101610f03565b50909b9a5050505050505050505050565b80356001600160a01b0381168114610f4957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610f7d57600080fd5b863595506020870135945060408701359350610f9b60608801610f32565b9250610fa960808801610f32565b915060a087013567ffffffffffffffff811115610fc557600080fd5b8701601f81018913610fd657600080fd5b803567ffffffffffffffff811115610ff057610ff0610f4e565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561101f5761101f610f4e565b6040528181528282016020018b101561103757600080fd5b816020840160208301376000602083830101528093505050509295509295509295565b60006020828403121561106c57600080fd5b81518015158114610e7a57600080fd5b634e487b7160e01b600052602160045260246000fd5b600181811c908216806110a657607f821691505b6020821081036110c657634e487b7160e01b600052602260045260246000fd5b50919050565b8281526040602082015260006110e56040830184610e3b565b949350505050565b600082516110ff818460208701610e17565b9190910192915050565b60006020828403121561111b57600080fd5b505191905056fea2646970667358221220dbe9ea35381e09d4dc2161ca5015c1fbaa6aa114322daeb7b9e079caadd5127964736f6c634300081e0033a264697066735822122062fff97323b3eb2a69a9b9ae25bb006dc4f83ccd506f0a8918b18ab994fee8cd64736f6c634300081e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createSwap(bytes32,uint256,address,address,uint256)": {
        "params": {
          "amount": "Cantidad de tokens a intercambiar.",
          "hashlock": "El hash keccak256 del secreto compartido.",
          "receiver": "Dirección que recibirá los tokens si presenta el secreto.",
          "timelockSeconds": "Duración del timelock en segundos.",
          "tokenAddress": "Dirección del contrato del token ERC-20 a intercambiar."
        }
      }
    },
    "title": "SwapFactory para desplegar y gestionar instancias de FusionSwapIntentERC20",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createSwap(bytes32,uint256,address,address,uint256)": {
        "notice": "Crea una nueva instancia del contrato FusionSwapIntentERC20.         El usuario (msg.sender) debe haber APROBADO previamente         que esta Factory pueda gastar sus 'amount' de 'tokenAddress'."
      }
    },
    "notice": "Permite la creación estandarizada de nuevos swaps atómicos ERC-20         y centraliza el depósito inicial de tokens del usuario.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3020,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "swaps",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3022,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "swapCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3025,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3028,
        "contract": "contracts/SwapFactory.sol:SwapFactory",
        "label": "version",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}