{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/AtomicSwapIntent.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\n/// @title Atomic Swap with Hashlock/Timelock for Intent-Based Execution\r\ncontract AtomicSwapIntent {\r\n    address payable public sender;\r\n    address payable public receiver;\r\n    bytes32 public hashlock;\r\n    uint256 public timelock;\r\n    uint256 public amount;\r\n    bool public withdrawn;\r\n    bool public refunded;\r\n\r\n    event SwapIntentCreated(\r\n        address indexed sender,\r\n        address indexed receiver,\r\n        bytes32 hashlock,\r\n        uint256 timelock,\r\n        uint256 amount\r\n    );\r\n\r\n    event SwapExecuted(bytes32 secret);\r\n    event SwapRefunded();\r\n\r\n    constructor(\r\n        bytes32 _hashlock,\r\n        uint256 _timelockSeconds,\r\n        address payable _receiver\r\n    ) payable {\r\n        require(msg.value > 0, \"Funds required\");\r\n        sender = payable(msg.sender);\r\n        receiver = _receiver;\r\n        hashlock = _hashlock;\r\n        timelock = block.timestamp + _timelockSeconds;\r\n        amount = msg.value;\r\n\r\n        emit SwapIntentCreated(sender, receiver, hashlock, timelock, amount);\r\n    }\r\n\r\n    function executeSwap(bytes32 _secret) external {\r\n        require(!withdrawn, \"Already withdrawn\");\r\n        require(!refunded, \"Already refunded\");\r\n        require(msg.sender == receiver, \"Only receiver can execute\");\r\n        require(keccak256(abi.encodePacked(_secret)) == hashlock, \"Invalid secret\");\r\n\r\n        withdrawn = true;\r\n        receiver.transfer(amount);\r\n        emit SwapExecuted(_secret);\r\n    }\r\n\r\n    function refundSwap() external {\r\n        require(block.timestamp > timelock, \"Timelock not expired\");\r\n        require(msg.sender == sender, \"Only sender can refund\");\r\n        require(!withdrawn, \"Already withdrawn\");\r\n        require(!refunded, \"Already refunded\");\r\n\r\n        refunded = true;\r\n        sender.transfer(amount);\r\n        emit SwapRefunded();\r\n    }\r\n\r\n    function getRemainingTime() external view returns (uint256) {\r\n        if (block.timestamp >= timelock) return 0;\r\n        return timelock - block.timestamp;\r\n    }\r\n\r\n    function getSwapStatus() external view returns (string memory) {\r\n        if (withdrawn) return \"Completed\";\r\n        if (refunded) return \"Refunded\";\r\n        return \"Pending\";\r\n    }\r\n}\r\n"
    },
    "contracts/PayFusion.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @author NightmareFox12\r\n */\r\n\r\ncontract PayFusion is Ownable {\r\n    struct Order {\r\n        address creator;\r\n        uint256 chainId;\r\n        address token; // address(0) = Ether\r\n        Status status;\r\n    }\r\n\r\n    // State Variables\r\n    uint256 orderID;\r\n    mapping(address => string) emails;\r\n    mapping(uint256 => Order) public orders;\r\n\r\n    // Events\r\n    event GreetingChange(address indexed greetingSetter, string newGreeting, bool premium, uint256 value);\r\n\r\n    constructor(address _owner) Ownable(_owner) {}\r\n\r\n    function savePreferences(uint256 _chainId, address _token, string memory _email) public {\r\n        address creator = msg.sender;\r\n\r\n        if (bytes(_email).length > 0 && bytes(_email).length >= 5) {\r\n            emails[creator] = _email;\r\n        }\r\n\r\n        orders[orderID] = Order({ creator: creator, chainId: _chainId, token: _token, status: Status.Open });\r\n\r\n        // emit OrderCreated(newOrderId, msg.sender, chainId, token, amount);\r\n        // return newOrderId;\r\n        orderID++;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No funds\");\r\n\r\n        (bool success, ) = payable(owner()).call{ value: balance }(\"\");\r\n        require(success, \"Failed to send Ether\");\r\n    }\r\n\r\n    // Function that allows the contract to receive ETH\r\n    receive() external payable {}\r\n\r\n    // CHAT GPT\r\n    enum Status {\r\n        Open,\r\n        Completed,\r\n        Cancelled\r\n    }\r\n\r\n    // function createOrder(uint256 chainId, address token, uint256 amount) external returns (uint256) {\r\n    //     require(amount > 0, \"Monto debe ser > 0\");\r\n\r\n    //     _orderIds.increment();\r\n    //     uint256 newOrderId = _orderIds.current();\r\n\r\n    //     orders[newOrderId] = Order({\r\n    //         creator: msg.sender,\r\n    //         chainId: chainId,\r\n    //         token: token,\r\n    //         amount: amount,\r\n    //         status: Status.Open\r\n    //     });\r\n\r\n    //     emit OrderCreated(newOrderId, msg.sender, chainId, token, amount);\r\n    //     return newOrderId;\r\n    // }\r\n}"
    },
    "contracts/SwapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"./AtomicSwapIntent.sol\";\r\n\r\ncontract SwapFactory {\r\n    address[] public allSwaps;\r\n\r\n    event SwapCreated(address swapAddress, address indexed creator, address indexed receiver, uint256 value);\r\n\r\n    /// @notice Creates a new instance of the AtomicSwapIntent contract\r\n    /// @param hashlock keccak256 of the shared secret\r\n    /// @param timelockSeconds maximum number of seconds to complete the swap\r\n    /// @param receiver the address that will receive the funds upon presenting the correct secret\r\n    function createSwap(bytes32 hashlock, uint256 timelockSeconds, address payable receiver) external payable {\r\n        require(msg.value > 0, \"Must send ETH to lock\");\r\n\r\n        AtomicSwapIntent newSwap = new AtomicSwapIntent{ value: msg.value }(hashlock, timelockSeconds, receiver);\r\n        allSwaps.push(address(newSwap));\r\n\r\n        emit SwapCreated(address(newSwap), msg.sender, receiver, msg.value);\r\n    }\r\n\r\n    function getSwapCount() external view returns (uint256) {\r\n        return allSwaps.length;\r\n    }\r\n\r\n    function getSwapAddress(uint256 index) external view returns (address) {\r\n        require(index < allSwaps.length, \"Invalid index\");\r\n        return allSwaps[index];\r\n    }\r\n\r\n    function getAllSwaps() external view returns (address[] memory) {\r\n        return allSwaps;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}